{"ast":null,"code":"import _taggedTemplateLiteral from\"N:/Projects/slack_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"N:/Projects/slack_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8;import React,{useEffect,useState}from'react';import styled from'styled-components';import InfoOutlinedIcon from'@material-ui/icons/InfoOutlined';import ChatInfo from'./ChatInfo';import ChatMessage from'./ChatMessage';import db from'../firebase';import{useParams}from'react-router-dom';import firebase from'firebase';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function Chat(_ref){var user=_ref.user;var _useParams=useParams(),channelId=_useParams.channelId;var _useState=useState(),_useState2=_slicedToArray(_useState,2),channel=_useState2[0],setChannel=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),messages=_useState4[0],setMessages=_useState4[1];var getMessages=function getMessages(){db.collection('rooms').doc(channelId).collection('messages').orderBy('timestamp','asc').onSnapshot(function(snapshot){var messages=snapshot.docs.map(function(doc){return doc.data();});console.log(messages);setMessages(messages);});};var sendMessage=function sendMessage(text){if(channelId){var payload={text:text,timestamp:firebase.firestore.Timestamp.now(),user:user.name,userImage:user.photo};db.collection('rooms').doc(channelId).collection('messages').add(payload);}};var getChanel=function getChanel(){db.collection('rooms').doc(channelId).onSnapshot(function(snapshot){setChannel(snapshot.data());});};useEffect(function(){getChanel();getMessages();},[channelId]);return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsxs(Header,{children:[/*#__PURE__*/_jsxs(Chanel,{children:[/*#__PURE__*/_jsxs(ChanelName,{children:[\"# \",channel&&channel.name]}),/*#__PURE__*/_jsx(ChanelInfo,{children:\"Company-wide announcements and work based matters\"})]}),/*#__PURE__*/_jsxs(ChanelDetails,{children:[/*#__PURE__*/_jsx(\"div\",{children:\"Details\"}),/*#__PURE__*/_jsx(Info,{})]})]}),/*#__PURE__*/_jsxs(MessageContainer,{children:[console.log(messages.length),messages.length>0&&messages.map(function(data,index){return/*#__PURE__*/_jsx(ChatMessage,{text:data.text,name:data.user,image:data.userImage,timestamp:data.timestamp});})]}),/*#__PURE__*/_jsx(ChatInfo,{sendMessage:sendMessage})]});}export default Chat;var Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    display: grid;\\n    grid-template-rows: 65px auto min-content;\\n    min-height: 0;\\n\"])));var Header=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    padding-left: 20px;\\n    paading-right: 20px;\\n    display: flex;\\n    align-items: center;\\n    border-bottom: solid 1px rgb(83, 39, 83, .13);\\n    justify-content: space-between;\\n\\n\"])));var Chanel=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n\\n\"])));var ChanelName=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n    font-wight: 600;\\n\"])));var ChanelInfo=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n    font-weight: 400;\\n    color: #606060;\\n    font-size: 13px;\\n    margin-top: 8px;\\n\\n\"])));var ChanelDetails=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n    display: flex;\\n    align-items: center;\\n\"])));var MessageContainer=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n    display: flex;\\n    flex-direction: column;\\n    overflow-y: scroll;\\n\\n\"])));var Info=styled(InfoOutlinedIcon)(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n    margin-left: 10px;\\n\"])));","map":{"version":3,"sources":["N:/Projects/slack_clone/src/components/Chat.js"],"names":["React","useEffect","useState","styled","InfoOutlinedIcon","ChatInfo","ChatMessage","db","useParams","firebase","Chat","user","channelId","channel","setChannel","messages","setMessages","getMessages","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","console","log","sendMessage","text","payload","timestamp","firestore","Timestamp","now","name","userImage","photo","add","getChanel","length","index","Container","div","Header","Chanel","ChanelName","ChanelInfo","ChanelDetails","MessageContainer","Info"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport ChatInfo from './ChatInfo'\r\nimport ChatMessage from './ChatMessage'\r\nimport db from '../firebase'\r\nimport { useParams } from 'react-router-dom';\r\nimport firebase from 'firebase'\r\n\r\nfunction Chat({ user }) {\r\n     let   { channelId } = useParams();\r\n     const [channel, setChannel] = useState();\r\n     const [messages, setMessages] = useState([]);\r\n    const getMessages =() =>{\r\n        db.collection('rooms')\r\n        .doc(channelId)\r\n        .collection('messages')\r\n        .orderBy('timestamp','asc')\r\n        .onSnapshot((snapshot)=>{\r\n            let messages = snapshot.docs.map((doc)=> doc.data());\r\n            console.log(messages)\r\n            setMessages(messages)\r\n        })\r\n    }\r\n    const sendMessage =(text)=>{\r\n        if(channelId){\r\n            let payload ={\r\n                text: text,\r\n                timestamp: firebase.firestore.Timestamp.now(),\r\n                user: user.name,\r\n                userImage: user.photo\r\n            }\r\n            db.collection('rooms').doc(channelId).collection('messages').add(payload)\r\n        }\r\n    }\r\n    const getChanel =()=>{\r\n        db.collection('rooms')\r\n        .doc(channelId)\r\n        .onSnapshot((snapshot)=>{\r\n            setChannel(snapshot.data())\r\n        })\r\n\r\n    }  \r\n     useEffect(()=>{\r\n        getChanel();\r\n        getMessages();\r\n     }, [channelId] )\r\n    return (\r\n        <Container>\r\n            <Header>\r\n                <Chanel>\r\n                    <ChanelName>\r\n                        # {channel && channel.name}\r\n                    </ChanelName>\r\n                    <ChanelInfo>\r\n                        Company-wide announcements and work based matters\r\n                    </ChanelInfo>\r\n\r\n                </Chanel>\r\n                <ChanelDetails>\r\n                    <div>Details</div>\r\n                    <Info />\r\n                     \r\n                </ChanelDetails>\r\n\r\n            </Header>\r\n            <MessageContainer>\r\n            {console.log(messages.length)}\r\n                {\r\n                    \r\n                    messages.length > 0 &&\r\n                    messages.map((data, index)=>(\r\n                        <ChatMessage \r\n                        text={data.text}\r\n                        name={data.user}\r\n                        image={data.userImage}\r\n                        timestamp={data.timestamp}\r\n                         />\r\n                    ))\r\n                }\r\n                \r\n            </MessageContainer>\r\n            <ChatInfo sendMessage= {sendMessage}/>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Chat\r\nconst Container = styled.div`\r\n    display: grid;\r\n    grid-template-rows: 65px auto min-content;\r\n    min-height: 0;\r\n`\r\nconst Header =styled.div`\r\n    padding-left: 20px;\r\n    paading-right: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: solid 1px rgb(83, 39, 83, .13);\r\n    justify-content: space-between;\r\n\r\n`\r\nconst Chanel = styled.div`\r\n\r\n`\r\nconst ChanelName = styled.div`\r\n    font-wight: 600;\r\n`\r\nconst ChanelInfo = styled.div`\r\n    font-weight: 400;\r\n    color: #606060;\r\n    font-size: 13px;\r\n    margin-top: 8px;\r\n\r\n`\r\nconst ChanelDetails = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`\r\nconst MessageContainer =styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-y: scroll;\r\n\r\n`\r\nconst Info =styled(InfoOutlinedIcon)`\r\n    margin-left: 10px;\r\n`"]},"metadata":{},"sourceType":"module"}